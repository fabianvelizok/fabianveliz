{"ast":null,"code":"import { useMemo } from 'react';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nlet apolloClient;\n\nfunction createIsomorphLink() {\n  if (true) {\n    const {\n      SchemaLink\n    } = require('@apollo/client/link/schema');\n\n    const {\n      schema\n    } = require(\"./schema\");\n\n    return new SchemaLink({\n      schema\n    });\n  } else {\n    const {\n      HttpLink\n    } = require('@apollo/client/link/http');\n\n    return new HttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin'\n    });\n  }\n}\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: createIsomorphLink(),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/home/fabian/Projects/fabianveliz/src/apollo/apolloClient.js"],"names":["useMemo","ApolloClient","InMemoryCache","apolloClient","createIsomorphLink","SchemaLink","require","schema","HttpLink","uri","credentials","createApolloClient","ssrMode","link","cache","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AAEA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,YAAmC;AACjC,UAAM;AAAEC,MAAAA;AAAF,QAAiBC,OAAO,CAAC,4BAAD,CAA9B;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaD,OAAO,YAA1B;;AACA,WAAO,IAAID,UAAJ,CAAe;AAAEE,MAAAA;AAAF,KAAf,CAAP;AACD,GAJD,MAIO;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAeF,OAAO,CAAC,0BAAD,CAA5B;;AACA,WAAO,IAAIE,QAAJ,CAAa;AAClBC,MAAAA,GAAG,EAAE,cADa;AAElBC,MAAAA,WAAW,EAAE;AAFK,KAAb,CAAP;AAID;AACF;;AAED,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIV,YAAJ,CAAiB;AACtBW,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAET,kBAAkB,EAFF;AAGtBU,IAAAA,KAAK,EAAE,IAAIZ,aAAJ;AAHe,GAAjB,CAAP;AAKD;;AAED,OAAO,SAASa,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGd,YAAH,2DAAmBQ,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIK,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACH,KAAd,CAAoBI,OAApB,CAA4BF,YAA5B;AACD,GAPmD,CAQpD;;;AACA,YAAmC,OAAOC,aAAP,CATiB,CAUpD;;AACA,MAAI,CAACd,YAAL,EAAmBA,YAAY,GAAGc,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AACtC,QAAMI,KAAK,GAAGpB,OAAO,CAAC,MAAMe,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACD","sourcesContent":["import { useMemo } from 'react'\nimport { ApolloClient, InMemoryCache } from '@apollo/client'\n\nlet apolloClient\n\nfunction createIsomorphLink() {\n  if (typeof window === 'undefined') {\n    const { SchemaLink } = require('@apollo/client/link/schema')\n    const { schema } = require('./schema')\n    return new SchemaLink({ schema })\n  } else {\n    const { HttpLink } = require('@apollo/client/link/http')\n    return new HttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin',\n    })\n  }\n}\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: createIsomorphLink(),\n    cache: new InMemoryCache(),\n  })\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient()\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState)\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient\n\n  return _apolloClient\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState])\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}